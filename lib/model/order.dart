//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.0

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class Order {
  /// Returns a new [Order] instance.
  Order({
    @required this.id,
    @required this.number,
    @required this.title,
    @required this.fulfillmentStatus,
    @required this.paymentStatus,
    this.currency,
    this.totalAmount,
    this.paymentUrl,
    this.statusUrl,
    this.address,
    this.customer,
    this.items = const [],
  });

  /// ID of the order. UUID Version 4.
  String id;

  /// A vanity id used for internal tracking of orders for a given vendor.
  int number;

  /// The title of the order, generated by combining the order's number property with the prefix \"Order #\".
  String title;

  /// The fulfillment status of the order.
  OrderFulfillmentStatusEnum fulfillmentStatus;

  /// The payment status of the order.
  OrderPaymentStatusEnum paymentStatus;

  /// The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
  OrderCurrencyEnum currency;

  /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. 
  // minimum: 0
  int totalAmount;

  /// A URL of a publicly-accessible webpage to pay for the order.
  String paymentUrl;

  /// A URL of a publicly-accessible webpage to see the order's status.
  String statusUrl;

  Address address;

  Group customer;

  /// items
  List<OrderItem> items;

  @override
  bool operator ==(Object other) => identical(this, other) || other is Order &&
     other.id == id &&
     other.number == number &&
     other.title == title &&
     other.fulfillmentStatus == fulfillmentStatus &&
     other.paymentStatus == paymentStatus &&
     other.currency == currency &&
     other.totalAmount == totalAmount &&
     other.paymentUrl == paymentUrl &&
     other.statusUrl == statusUrl &&
     other.address == address &&
     other.customer == customer &&
     other.items == items;

  @override
  int get hashCode =>
    (id == null ? 0 : id.hashCode) +
    (number == null ? 0 : number.hashCode) +
    (title == null ? 0 : title.hashCode) +
    (fulfillmentStatus == null ? 0 : fulfillmentStatus.hashCode) +
    (paymentStatus == null ? 0 : paymentStatus.hashCode) +
    (currency == null ? 0 : currency.hashCode) +
    (totalAmount == null ? 0 : totalAmount.hashCode) +
    (paymentUrl == null ? 0 : paymentUrl.hashCode) +
    (statusUrl == null ? 0 : statusUrl.hashCode) +
    (address == null ? 0 : address.hashCode) +
    (customer == null ? 0 : customer.hashCode) +
    (items == null ? 0 : items.hashCode);

  @override
  String toString() => 'Order[id=$id, number=$number, title=$title, fulfillmentStatus=$fulfillmentStatus, paymentStatus=$paymentStatus, currency=$currency, totalAmount=$totalAmount, paymentUrl=$paymentUrl, statusUrl=$statusUrl, address=$address, customer=$customer, items=$items]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'id'] = id;
      json[r'number'] = number;
      json[r'title'] = title;
      json[r'fulfillment_status'] = fulfillmentStatus;
      json[r'payment_status'] = paymentStatus;
    if (currency != null) {
      json[r'currency'] = currency;
    }
    if (totalAmount != null) {
      json[r'total_amount'] = totalAmount;
    }
    if (paymentUrl != null) {
      json[r'payment_url'] = paymentUrl;
    }
      json[r'status_url'] = statusUrl == null ? null : statusUrl;
    if (address != null) {
      json[r'address'] = address;
    }
    if (customer != null) {
      json[r'customer'] = customer;
    }
    if (items != null) {
      json[r'items'] = items;
    }
    return json;
  }

  /// Returns a new [Order] instance and imports its values from
  /// [json] if it's non-null, null if [json] is null.
  static Order fromJson(Map<String, dynamic> json) => json == null
    ? null
    : Order(
        id: json[r'id'],
        number: json[r'number'],
        title: json[r'title'],
        fulfillmentStatus: OrderFulfillmentStatusEnum.fromJson(json[r'fulfillment_status']),
        paymentStatus: OrderPaymentStatusEnum.fromJson(json[r'payment_status']),
        currency: OrderCurrencyEnum.fromJson(json[r'currency']),
        totalAmount: json[r'total_amount'],
        paymentUrl: json[r'payment_url'],
        statusUrl: json[r'status_url'],
        address: Address.fromJson(json[r'address']),
        customer: Group.fromJson(json[r'customer']),
        items: OrderItem.listFromJson(json[r'items']),
    );

  static List<Order> listFromJson(List<dynamic> json, {bool emptyIsNull, bool growable,}) =>
    json == null || json.isEmpty
      ? true == emptyIsNull ? null : <Order>[]
      : json.map((dynamic value) => Order.fromJson(value)).toList(growable: true == growable);

  static Map<String, Order> mapFromJson(Map<String, dynamic> json) {
    final map = <String, Order>{};
    if (json?.isNotEmpty == true) {
      json.forEach((key, value) => map[key] = Order.fromJson(value));
    }
    return map;
  }

  // maps a json object with a list of Order-objects as value to a dart map
  static Map<String, List<Order>> mapListFromJson(Map<String, dynamic> json, {bool emptyIsNull, bool growable,}) {
    final map = <String, List<Order>>{};
    if (json?.isNotEmpty == true) {
      json.forEach((key, value) {
        map[key] = Order.listFromJson(value, emptyIsNull: emptyIsNull, growable: growable,);
      });
    }
    return map;
  }
}

/// The fulfillment status of the order.
class OrderFulfillmentStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const OrderFulfillmentStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const FULFILLED = OrderFulfillmentStatusEnum._(r'FULFILLED');
  static const UNFULFILLED = OrderFulfillmentStatusEnum._(r'UNFULFILLED');

  /// List of all possible values in this [enum][OrderFulfillmentStatusEnum].
  static const values = <OrderFulfillmentStatusEnum>[
    FULFILLED,
    UNFULFILLED,
  ];

  static OrderFulfillmentStatusEnum fromJson(dynamic value) =>
    OrderFulfillmentStatusEnumTypeTransformer().decode(value);

  static List<OrderFulfillmentStatusEnum> listFromJson(List<dynamic> json, {bool emptyIsNull, bool growable,}) =>
    json == null || json.isEmpty
      ? true == emptyIsNull ? null : <OrderFulfillmentStatusEnum>[]
      : json
          .map((value) => OrderFulfillmentStatusEnum.fromJson(value))
          .toList(growable: true == growable);
}

/// Transformation class that can [encode] an instance of [OrderFulfillmentStatusEnum] to String,
/// and [decode] dynamic data back to [OrderFulfillmentStatusEnum].
class OrderFulfillmentStatusEnumTypeTransformer {
  const OrderFulfillmentStatusEnumTypeTransformer._();

  factory OrderFulfillmentStatusEnumTypeTransformer() => _instance ??= OrderFulfillmentStatusEnumTypeTransformer._();

  String encode(OrderFulfillmentStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OrderFulfillmentStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OrderFulfillmentStatusEnum decode(dynamic data, {bool allowNull}) {
    switch (data) {
      case r'FULFILLED': return OrderFulfillmentStatusEnum.FULFILLED;
      case r'UNFULFILLED': return OrderFulfillmentStatusEnum.UNFULFILLED;
      default:
        if (allowNull == false) {
          throw ArgumentError('Unknown enum value to decode: $data');
        }
    }
    return null;
  }

  /// Singleton [OrderFulfillmentStatusEnumTypeTransformer] instance.
  static OrderFulfillmentStatusEnumTypeTransformer _instance;
}

/// The payment status of the order.
class OrderPaymentStatusEnum {
  /// Instantiate a new enum with the provided [value].
  const OrderPaymentStatusEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const PAID = OrderPaymentStatusEnum._(r'PAID');
  static const UNPAID = OrderPaymentStatusEnum._(r'UNPAID');

  /// List of all possible values in this [enum][OrderPaymentStatusEnum].
  static const values = <OrderPaymentStatusEnum>[
    PAID,
    UNPAID,
  ];

  static OrderPaymentStatusEnum fromJson(dynamic value) =>
    OrderPaymentStatusEnumTypeTransformer().decode(value);

  static List<OrderPaymentStatusEnum> listFromJson(List<dynamic> json, {bool emptyIsNull, bool growable,}) =>
    json == null || json.isEmpty
      ? true == emptyIsNull ? null : <OrderPaymentStatusEnum>[]
      : json
          .map((value) => OrderPaymentStatusEnum.fromJson(value))
          .toList(growable: true == growable);
}

/// Transformation class that can [encode] an instance of [OrderPaymentStatusEnum] to String,
/// and [decode] dynamic data back to [OrderPaymentStatusEnum].
class OrderPaymentStatusEnumTypeTransformer {
  const OrderPaymentStatusEnumTypeTransformer._();

  factory OrderPaymentStatusEnumTypeTransformer() => _instance ??= OrderPaymentStatusEnumTypeTransformer._();

  String encode(OrderPaymentStatusEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OrderPaymentStatusEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OrderPaymentStatusEnum decode(dynamic data, {bool allowNull}) {
    switch (data) {
      case r'PAID': return OrderPaymentStatusEnum.PAID;
      case r'UNPAID': return OrderPaymentStatusEnum.UNPAID;
      default:
        if (allowNull == false) {
          throw ArgumentError('Unknown enum value to decode: $data');
        }
    }
    return null;
  }

  /// Singleton [OrderPaymentStatusEnumTypeTransformer] instance.
  static OrderPaymentStatusEnumTypeTransformer _instance;
}

/// The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
class OrderCurrencyEnum {
  /// Instantiate a new enum with the provided [value].
  const OrderCurrencyEnum._(this.value);

  /// The underlying value of this enum member.
  final String value;

  @override
  String toString() => value;

  String toJson() => value;

  static const USD = OrderCurrencyEnum._(r'USD');
  static const CAD = OrderCurrencyEnum._(r'CAD');
  static const GBP = OrderCurrencyEnum._(r'GBP');
  static const CHF = OrderCurrencyEnum._(r'CHF');
  static const EUR = OrderCurrencyEnum._(r'EUR');
  static const AUD = OrderCurrencyEnum._(r'AUD');
  static const NZD = OrderCurrencyEnum._(r'NZD');
  static const ZAR = OrderCurrencyEnum._(r'ZAR');

  /// List of all possible values in this [enum][OrderCurrencyEnum].
  static const values = <OrderCurrencyEnum>[
    USD,
    CAD,
    GBP,
    CHF,
    EUR,
    AUD,
    NZD,
    ZAR,
  ];

  static OrderCurrencyEnum fromJson(dynamic value) =>
    OrderCurrencyEnumTypeTransformer().decode(value);

  static List<OrderCurrencyEnum> listFromJson(List<dynamic> json, {bool emptyIsNull, bool growable,}) =>
    json == null || json.isEmpty
      ? true == emptyIsNull ? null : <OrderCurrencyEnum>[]
      : json
          .map((value) => OrderCurrencyEnum.fromJson(value))
          .toList(growable: true == growable);
}

/// Transformation class that can [encode] an instance of [OrderCurrencyEnum] to String,
/// and [decode] dynamic data back to [OrderCurrencyEnum].
class OrderCurrencyEnumTypeTransformer {
  const OrderCurrencyEnumTypeTransformer._();

  factory OrderCurrencyEnumTypeTransformer() => _instance ??= OrderCurrencyEnumTypeTransformer._();

  String encode(OrderCurrencyEnum data) => data.value;

  /// Decodes a [dynamic value][data] to a OrderCurrencyEnum.
  ///
  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
  ///
  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
  /// and users are still using an old app with the old code.
  OrderCurrencyEnum decode(dynamic data, {bool allowNull}) {
    switch (data) {
      case r'USD': return OrderCurrencyEnum.USD;
      case r'CAD': return OrderCurrencyEnum.CAD;
      case r'GBP': return OrderCurrencyEnum.GBP;
      case r'CHF': return OrderCurrencyEnum.CHF;
      case r'EUR': return OrderCurrencyEnum.EUR;
      case r'AUD': return OrderCurrencyEnum.AUD;
      case r'NZD': return OrderCurrencyEnum.NZD;
      case r'ZAR': return OrderCurrencyEnum.ZAR;
      default:
        if (allowNull == false) {
          throw ArgumentError('Unknown enum value to decode: $data');
        }
    }
    return null;
  }

  /// Singleton [OrderCurrencyEnumTypeTransformer] instance.
  static OrderCurrencyEnumTypeTransformer _instance;
}

